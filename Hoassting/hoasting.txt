Hoisting is a fundamental concept in JavaScript that affects how variables 
and function declarations are processed during the compilation and execution phases

Compilation and Execution Phases:
JavaScript code is executed in two main phases: compilation and execution.

//Compilation Phase: 
During this phase, JavaScript's engine scans through your code, identifies variable and function declarations,
 and allocates memory for them. This phase sets up the structure for the code execution.

//Execution Phase:
 After the compilation phase, the code is executed line by line. This is when assignments, function calls, 
 and other statements are executed.

 //Hoisting of Variables:
In JavaScript, variable declarations are hoisted to the top of their containing scope during the compilation phase. 
However, the actual assignments are not hoisted. This means you can use a variable before declaring it, but the value
 will be undefined until it's assigned.

ex:
console.log(myVar); // Output: undefined
var myVar = 42;

Hoisting of Function Declarations:
Function declarations are also hoisted in their entirety. This means you can call a function before declaring it
, and the function will still work.


sayHello(); // Output: Hello!

function sayHello() {
  console.log("Hello!");
}

Hoisting of Function Expressions:
Function expressions (where you assign a function to a variable) are not fully hoisted like function declarations. 
Only the variable declaration is hoisted, not the function assignment.

myFunc(); // Output: TypeError: myFunc is not a function

var myFunc = function() {
  console.log("Hello from myFunc!");
};