Function is a block of code that is designed for perform a perticular task and exicute when it is called

difference betweeen arrow and regular function
Use of this keyword: Unlike regular functions, arrow functions do not have their own this. 
ex:
let user = {
        name: "GFG",
        gfg1:() => {
            console.log("hello " + this.name); // no 'this' binding here
        },
        gfg2(){   
            console.log("Welcome to " + this.name); // 'this' binding works here
        }
    };
    user.gfg1();
    user.gfg2();


    -------------------

Availability of arguments objects: Arguments objects are not available in arrow functions, 
but are available in regular functions.  

----------------------------


Using new keyword: Regular functions created using function declarations or expressions are ‘constructible’ 
and ‘callable’. Since regular functions are constructible, they can be called using the ‘new’ keyword.
 However, the arrow functions are only ‘callable’ and not constructible. Thus, we will get a run-time error on trying 
 to construct a non-constructible arrow function using the new keyword.

Example using the regular functions:

javascript

    let x = function(){
    console.log(arguments);
    };
    var y= new x(1,2,3);
Output:  Example using arrow function:

javascript

    let x = ()=> {
        console.log(arguments);
    };
    new x(1,2,3);
Output: type error x is not constructor
    


